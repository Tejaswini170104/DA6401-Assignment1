
=== Training with config_1 ===

Epoch 1/1|cross_entropy Loss: 0.3890
Epoch 1/1|cross_entropy Loss: 0.1591
Epoch 1/1|cross_entropy Loss: 0.1152
Epoch 1/1|cross_entropy Loss: 0.0910
Epoch 1/1|cross_entropy Loss: 0.0719
Epoch 1/1|cross_entropy Loss: 0.0599
Epoch 1/1|cross_entropy Loss: 0.0495
Epoch 1/1|cross_entropy Loss: 0.0409
Traceback (most recent call last):
  File "/workspaces/DA6401-Assignment1/train.py", line 786, in <module>
    loss = nn.train(
           ^^^^^^^^^
  File "/workspaces/DA6401-Assignment1/train.py", line 292, in train
    optimizer.step(grads)
  File "/workspaces/DA6401-Assignment1/train.py", line 364, in step
    self.parameters[i] -= self.lr * m_hat / (np.sqrt(v_hat) + self.epsilon)
                                             ^^^^^^^^^^^^^^
KeyboardInterrupt
Traceback (most recent call last):
  File "/workspaces/DA6401-Assignment1/train.py", line 786, in <module>
    loss = nn.train(
           ^^^^^^^^^
  File "/workspaces/DA6401-Assignment1/train.py", line 292, in train
    optimizer.step(grads)
  File "/workspaces/DA6401-Assignment1/train.py", line 364, in step
    self.parameters[i] -= self.lr * m_hat / (np.sqrt(v_hat) + self.epsilon)
                                             ^^^^^^^^^^^^^^
KeyboardInterrupt
Exception ignored in atexit callback: <function _start_and_connect_service.<locals>.teardown_atexit at 0x7880deb79080>
Traceback (most recent call last):
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/wandb/sdk/lib/service_connection.py", line 94, in teardown_atexit
    conn.teardown(hooks.exit_code)
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/wandb/sdk/lib/service_connection.py", line 226, in teardown
    self._router.join()
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/wandb/sdk/interface/router.py", line 75, in join
    self._thread.join()
  File "/usr/local/python/3.12.1/lib/python3.12/threading.py", line 1147, in join
    self._wait_for_tstate_lock()
  File "/usr/local/python/3.12.1/lib/python3.12/threading.py", line 1167, in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt:
